name: "Feature Flags CI/CD"

on: [push]

jobs:
  build:

    runs-on: windows-latest
    
    env:
      buildVersion: 1.0.0.0
    
    steps:
    # checkout the repo
    - uses: actions/checkout@v1

    # install dependencies, build, and test
    - name: Setup Dotnet for use with actions
      uses: actions/setup-dotnet@v1.0.0
    - name: Build application version number
      run: |
        Write-Host "Generating Build Number"
        #Get the version from the csproj file
        $xml = [Xml] (Get-Content FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj)
        $initialVersion = [Version] $xml.Project.PropertyGroup.Version
        Write-Host "Initial Version: " $version
        $spliteVersion = $initialVersion -Split "\."
        #Get the build number (number of days since January 1, 2000)
        $baseDate = [datetime]"01/01/2000"
        $currentDate = $(Get-Date)
        $interval = (NEW-TIMESPAN -Start $baseDate -End $currentDate)
        $buildNumber = $interval.Days
        #Get the revision number (number seconds (divided by two) into the day on which the compilation was performed)
        $StartDate=[datetime]::Today
        $EndDate=(GET-DATE)
        $revisionNumber = [math]::Round((New-TimeSpan -Start $StartDate -End $EndDate).TotalSeconds / 2,0)
        #Final version number
        $finalBuildVersion = "$($spliteVersion[0]).$($spliteVersion[1]).$($buildNumber).$($revisionNumber)"
        Write-Host "Major.Minor,Build,Revision"
        Write-Host "Final build number: " $finalBuildVersion
        #Writing final version number back to Github variable
        Write-Host "Writing final version $finalBuildVersion back to Github variable"
        echo "::set-env name=buildVersion::$finalBuildVersion"
      shell: powershell
    
    #Build and test service
    #- name: Build with dotnet
    #  run: dotnet build FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj --configuration Release      
    - name: Automated Tests
      run: dotnet test FeatureFlags/FeatureFlags.Tests/FeatureFlags.Tests.csproj --configuration Release --logger trx --collect "Code coverage" --settings:./FeatureFlags/FeatureFlags.Tests/CodeCoverage.runsettings

    #Publish dotnet objects
    - name: Publish Web Service
      run: dotnet publish FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj --configuration Release -p:Version=${{env.buildVersion}}
    - name: Publish Web Site
      run: dotnet publish FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj --configuration Release -p:Version=${{env.buildVersion}}
    - name: Publish functional tests
      run: dotnet publish FeatureFlags/FeatureFlags.FunctionalTests/FeatureFlags.FunctionalTests.csproj --configuration Release --output ./FunctionalTests'
    
    #Publish build artifacts to GitHub
    - name: publish web service build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: serviceapp
        path: FeatureFlags/FeatureFlags.Service/bin/Release/netcoreapp3.0/publish
    - name: publish website build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: webapp
        path: FeatureFlags/FeatureFlags.Web/bin/Release/netcoreapp3.0/publish
    - name: publish function test build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: functionaltests
        path: FeatureFlags/FeatureFlags.FunctionalTests/bin/Release/netcoreapp3.0/publish

  #Deploy the artifacts to Azure
  deploy:
    runs-on: windows-latest
    
    needs: build
    
    steps:  
      
    #Login with the secret SP details
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}  
    - name: Deployment
      run: |
        Write-Host "Starting deployment"
        Write-Host "Continuing deployment"
      shell: powershell
    
    #Download the artifacts from GitHub
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: serviceapp
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: webapp
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: functionaltests
    
    #Deploy service and website to Azure staging slots
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: featureflags-data-eu-service
        package: serviceapp
        slot-name: staging     
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: featureflags-data-eu-web
        package: webapp
        slot-name: staging 

    # vNext: Run functional tests on staging slots      
    # vNext: Swap staging slots with prod
     
