name: "Feature Flags CI/CD"

on: [push]

jobs:
  build:

    runs-on: windows-latest
    
    env:
      buildVersion: 1.0.0.0 #The initial build version, but this is updated below
      dotNetVersion: netcoreapp3.1
      dotNetConfiguration: Release
   
    steps:
    # checkout the repo
    - uses: actions/checkout@v1
     
    - name: Check variables
      run: |
        Write-Host "buildVersion: ${{ env.buildVersion }}"
        Write-Host "dotNetVersion: ${{ env.dotNetVersion }}"
        Write-Host "dotNetConfiguration: ${{ env.dotNetConfiguration }}"
     
    # install dependencies, build, and test
    - name: Setup Dotnet for use with actions
      uses: actions/setup-dotnet@v1.0.0
    - name: Custom script to create a unique application version number for this build
      run: |
        Write-Host "Generating Build Number"
        #Get the version from the csproj file
        $xml = [Xml] (Get-Content FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj)
        $initialVersion = [Version] $xml.Project.PropertyGroup.Version
        Write-Host "Initial Version: " $version
        $splitVersion = $initialVersion -Split "\."
        #Get the build number (number of days since January 1, 2000)
        $baseDate = [datetime]"01/01/2000"
        $currentDate = $(Get-Date)
        $interval = (NEW-TIMESPAN -Start $baseDate -End $currentDate)
        $buildNumber = $interval.Days
        #Get the revision number (number seconds (divided by two) into the day on which the compilation was performed)
        $StartDate=[datetime]::Today
        $EndDate=(GET-DATE)
        $revisionNumber = [math]::Round((New-TimeSpan -Start $StartDate -End $EndDate).TotalSeconds / 2,0)
        #Final version number
        $finalBuildVersion = "$($splitVersion[0]).$($splitVersion[1]).$($buildNumber).$($revisionNumber)"
        Write-Host "Major.Minor,Build,Revision"
        Write-Host "Final build number: " $finalBuildVersion
        #Writing final version number back to Github variable
        Write-Host "Writing final version $finalBuildVersion back to Github variable"
        echo "::set-env name=buildVersion::$finalBuildVersion"
      shell: powershell
    
    #Build and test service   
    - name: Run automated unit and integration tests
      run: dotnet test FeatureFlags/FeatureFlags.Tests/FeatureFlags.Tests.csproj --configuration ${{ env.dotNetConfiguration }} --logger trx --collect "Code coverage" --settings:./FeatureFlags/FeatureFlags.Tests/CodeCoverage.runsettings

    #Publish dotnet objects
    - name: DotNET Publish Web Service
      run: dotnet publish FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj --configuration ${{ env.dotNetConfiguration }} -p:Version=${{env.buildVersion}}
    - name: DotNET Publish Web Site
      run: dotnet publish FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj --configuration ${{ env.dotNetConfiguration }} -p:Version=${{env.buildVersion}}
    - name: DotNET Publish functional tests
      run: dotnet publish FeatureFlags/FeatureFlags.FunctionalTests/FeatureFlags.FunctionalTests.csproj --configuration ${{ env.dotNetConfiguration }}
    - name: Copy chromedriver for functional test
      run: copy "FeatureFlags/FeatureFlags.FunctionalTests/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/chromedriver.exe" "FeatureFlags/FeatureFlags.FunctionalTests/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/publish"
      shell: powershell
    
    #Publish build artifacts to GitHub
    - name: Upload web service build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: serviceapp
        path: FeatureFlags/FeatureFlags.Service/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/publish
    - name: Upload website build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: webapp
        path: FeatureFlags/FeatureFlags.Web/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/publish
    - name: Upload function test build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: functionaltests
        path: FeatureFlags/FeatureFlags.FunctionalTests/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/publish

  #Deploy the artifacts to Azure
  preDeploy:
    runs-on: windows-latest
    needs: build        
    steps:        
    # Login with the secret SP details
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}  
    - name: Deployment setup PowerShell script
      run: |
        Write-Host "Starting deployment"
        Write-Host "Continuing deployment"
      shell: powershell
    
    #Download the artifacts from GitHub
    - name: Download serviceapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: serviceapp
    - name: Download webapp artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: webapp
    - name: Download functionaltests artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: functionaltests
    
    #Deploy service and website to Azure staging slots
    - name: Deploy web service to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: featureflags-data-eu-service
        package: serviceapp
        slot-name: staging     
    - name: Deploy website to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: featureflags-data-eu-web
        package: webapp
        slot-name: staging 

    # Run functional tests on staging slots     
    - name: Functional Tests
      run: |
        $vsTestConsoleExe = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe"
        $targetTestDll = "functionaltests\FeatureFlags.FunctionalTests.dll"
        $testRunSettings = "/Settings:`"functionaltests\test.runsettings`" "
        $parameters = " -- ServiceUrl=""https://featureflags-data-eu-service-staging.azurewebsites.net/"" WebsiteUrl=""https://featureflags-data-eu-web-staging.azurewebsites.net/"" "
        #Note that the `" is an escape character to quote strings, and the `& is needed to start the command
        $command = "`& `"$vsTestConsoleExe`" `"$targetTestDll`" $testRunSettings $parameters " 
        Write-Host "$command"
        Invoke-Expression $command
      shell: powershell
  
  #Deploy the artifacts to Azure
  deploySwapSlots:
    runs-on: ubuntu-latest # Note, Azure CLI requires a Linux runner...
    needs: [build, preDeploy]
    #Only deploy if running off the master branch - we don't want to deploy off feature branches
    if: github.ref == 'refs/heads/master'
        
    steps:
    # Login with the secret SP details
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}     
      #Swap staging slots with prod
    - name: Swap web service staging slot to production
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az webapp deployment slot swap --resource-group SamLearnsAzureFeatureFlags --name featureflags-data-eu-service --slot staging --target-slot production
    - name: Swap web site staging slot to production
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az webapp deployment slot swap --resource-group SamLearnsAzureFeatureFlags --name featureflags-data-eu-web --slot staging --target-slot production

