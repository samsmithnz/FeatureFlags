# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

variables:
  vmImage: 'vs2017-win2016'
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  buildNumber: '1.0.0.0'

stages:
- stage: DeployDev
  displayName: 'Deploy Dev Stage'
  jobs:
  - job: Build
    displayName: 'Build job'
    pool:
      vmImage: $(vmImage)
    steps:
    - task: PowerShell@2
      displayName: 'Generate build version number'
      inputs:
        targetType: 'inline'
        script: |
         Write-Host "Generating Build Number"
         #Get the version from the csproj file
         $xml = [Xml] (Get-Content FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj)
         $initialVersion = [Version] $xml.Project.PropertyGroup.Version
         Write-Host "Initial Version: " $version
         $spliteVersion = $initialVersion -Split "\."
         #Get the build number (number of days since January 1, 2000)
         $baseDate = [datetime]"01/01/2000"
         $currentDate = $(Get-Date)
         $interval = (NEW-TIMESPAN -Start $baseDate -End $currentDate)
         $buildNumber = $interval.Days
         #Get the revision number (number seconds (divided by two) into the day on which the compilation was performed)
         $StartDate=[datetime]::Today
         $EndDate=(GET-DATE)
         $revisionNumber = [math]::Round((New-TimeSpan -Start $StartDate -End $EndDate).TotalSeconds / 2,0)
         #Final version number
         $finalBuildVersion = "$($spliteVersion[0]).$($spliteVersion[1]).$($buildNumber).$($revisionNumber)"
         Write-Host "Major.Minor,Build,Revision"
         Write-Host "Final build number: " $finalBuildVersion
         #Writing final version number back to Azure DevOps variable
         Write-Host "##vso[task.setvariable variable=buildNumber]$finalBuildVersion"

    - task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
      displayName: 'Show all build variables in build output.'

    #- task: DotNetCoreCLI@2
    #  displayName: 'Restore dotnet core projects'
    #  inputs:
    #    command: restore
    #    projects: |
    #     FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj
    #     FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj
    #     FeatureFlags/FeatureFlags.Tests/FeatureFlags.Tests.csproj

    #- task: DotNetCoreCLI@2
    #  displayName: 'Build dotnet core projects'
    #  inputs:
    #    command: build
    #    projects: |
    #     FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj
    #     FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj
    #     FeatureFlags/FeatureFlags.Tests/FeatureFlags.Tests.csproj
    #    arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Test dotnet code projects'
      inputs:
        command: test
        projects: |
         FeatureFlags/FeatureFlags.Tests/FeatureFlags.Tests.csproj
        arguments: '--configuration $(buildConfiguration) --logger trx --collect "Code coverage" --settings:$(Build.SourcesDirectory)\FeatureFlags\FeatureFlags.Tests\CodeCoverage.runsettings'

    - task: DotNetCoreCLI@2
      displayName: 'Publish dotnet core projects'
      inputs:
        command: publish
        publishWebProjects: false
        projects: |
         FeatureFlags/FeatureFlags.Service/FeatureFlags.Service.csproj
         FeatureFlags/FeatureFlags.Web/FeatureFlags.Web.csproj
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory) -p:Version=$(buildNumber)'
        zipAfterPublish: true

    # Publish the artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

- stage: Deploy
  displayName: 'Deploy Stage'
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Deploy
    displayName: "Deploy job"
    pool:
      vmImage: $(vmImage)    
    steps:
    - task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
      displayName: 'Show all build variables in build output.'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download the build artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(build.artifactstagingdirectory)'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy: web service'
      inputs:
        azureSubscription: 'SamLearnsAzure connection to Azure Portal'
        WebAppName: 'featureflags-data-eu-service'
        DeployToSlotFlag: true
        ResourceGroupName: 'SamLearnsAzureData'
        Package: '$(build.artifactstagingdirectory)/drop/FeatureFlags.Service.zip'
        TakeAppOfflineFlag: true
        JSONFiles: '**/appsettings.json'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy: web site'
      inputs:
        azureSubscription: 'SamLearnsAzure connection to Azure Portal'
        WebAppName: 'featureflags-data-eu-web'
        DeployToSlotFlag: true
        ResourceGroupName: 'SamLearnsAzureData'
        Package: '$(build.artifactstagingdirectory)/drop/FeatureFlags.Web.zip'
        TakeAppOfflineFlag: true
        JSONFiles: '**/appsettings.json'